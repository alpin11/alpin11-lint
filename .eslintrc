{
    "env": {
        "browser": true,
        "es2021": true,
        "node": true,
        "worker": true,
        "mocha": true,
        "jest": true
    },
    "extends": [
        "plugin:react/recommended",
        "standard-with-typescript"
    ],
    "globals": {
        "Atomics": "readonly",
        "SharedArrayBuffer": "readonly"
    },
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaFeatures": {
            "jsx": true
        },
        "ecmaVersion": 12,
        "sourceType": "module",
        "project": "./tsconfig.json"
    },
    "plugins": [
        "@typescript-eslint",
        "react"
    ],
    "rules": {        
        "prefer-template": "error",
        "standard/no-callback-literal": "off",
        "no-void": "off",
        "no-new": "off",
        "comma-dangle": "off",
        
        "@typescript-eslint/comma-dangle": ["error", "always-multiline"],
        "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
        "@typescript-eslint/consistent-type-imports": ["error", {"prefer": "type-imports"}],
        "@typescript-eslint/no-inferrable-types": "error",
        "@typescript-eslint/no-empty-interface": "warn",
        "@typescript-eslint/no-unused-vars": "warn",
        "@typescript-eslint/no-explicit-any": "warn",
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
        "@typescript-eslint/no-unnecessary-condition": "error",
        "@typescript-eslint/no-unnecessary-type-arguments": "error",
        "@typescript-eslint/no-unnecessary-type-assertion": "error",
        "@typescript-eslint/no-unnecessary-type-constraint": "error",
        "@typescript-eslint/non-nullable-type-assertion-style": "error",
        "@typescript-eslint/prefer-as-const": "error",
        "@typescript-eslint/prefer-includes": "error",
        "@typescript-eslint/prefer-string-starts-ends-with": "error",
        "@typescript-eslint/strict-boolean-expressions": "off",
        "@typescript-eslint/no-floating-promises": "off",
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/no-misused-promises": "off",
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/promise-function-async": "off",
        "@typescript-eslint/naming-convention": "off",
        "@typescript-eslint/no-for-in-array": "off",
        "@typescript-eslint/method-signature-style": "off",
        "@typescript-eslint/return-await": "off",
        "@typescript-eslint/no-non-null-assertion": "off",

        "react/jsx-indent": ["error", 2, { "checkAttributes": true, "indentLogicalExpressions": true }],
        "react/function-component-definition": [2, { "namedComponents": "arrow-function" }],
        "react/self-closing-comp": ["error", { "component": true, "html": true }],
        "react/jsx-closing-bracket-location": [1, "line-aligned"],
        "react/jsx-closing-tag-location": "error",
        "react/jsx-curly-brace-presence": ["error", { "props": "never", "children": "never" }],
        "react/jsx-curly-newline": ["error", { "multiline": "consistent", "singleline": "forbid" }],
        "react/jsx-curly-spacing": ["error", {"when": "never", "children": true, "allowMultiline": true}],
        "react/jsx-equals-spacing": ["error", "never"],
        "react/jsx-fragments": ["error", "syntax"],
        "react/jsx-indent-props": ["error", 2],
        "react/jsx-max-props-per-line": ["error", { "when": "multiline" }],
        "react/jsx-newline": ["error", { "prevent": true }],
        "react/jsx-props-no-multi-spaces": "error",
        "react/jsx-space-before-closing": ["error", "never"],
        "react/jsx-tag-spacing": ["error", { "closingSlash": "never", "beforeSelfClosing": "never", "afterOpening": "never", "beforeClosing": "allow" }],
        "react/jsx-wrap-multilines": ["error", {
            "declaration": "parens-new-line",
            "assignment": "parens-new-line",
            "return": "parens-new-line",
            "arrow": "parens-new-line",
            "condition": "parens-new-line",
            "logical": "parens-new-line",
            "prop": "parens-new-line"
        }],
        "react/jsx-first-prop-new-line": ["error", "multiline-multiprop"],
        "react/display-name": "off",
        "react/prop-types": "off"
    }
}